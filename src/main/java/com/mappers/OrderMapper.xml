<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
       
    <mapper namespace="com.mappers.OrderMapper">
    
    <resultMap id="result" type="Order">
        <result property="id" column="Id"/>
        <result property ="customerId" column ="CustomerId"/> 
         <result property ="genre" column ="Type"/> 
        <result property ="dateTime" column ="DateTime"/>
		 <result property ="movieName" column ="Name"/>  
		 <result property="movieId" column="MovieId"/>   
        <result property="returnDate" column="ReturnDate"/>   
          <result property="movieRating" column="MovieRating"/>  
    </resultMap>
    
	<resultMap id="subscription_type" type="AccountTypeLK">
		<result property="accountType_LK" column="Account_TypeLK"/>
		<result property="price" column="Price"/>
		<result property="monthly_movies" column="monthly_movies"/>
		<result property="order_movies" column="order_movies"/>
	 </resultMap>
   
   
   <select id="selectAll" resultMap="result">
        SELECT * FROM Orders;
    </select>
    
    <insert id="createNewOrder" keyProperty="order.id" useGeneratedKeys="true">
    	INSERT INTO Orders(DateTime)
    	VALUES(NOW());
    </insert>
    
    <insert id="createNewRental" >
    	INSERT INTO Rental(AccountId,CustRepId,OrderId,MovieId)
    	VALUES (#{accountId},1,#{orderId},#{movieId});
    </insert>    
    
    <select id="selectSubscriptionsByMonth" resultType="Integer">
    	SELECT COUNT(*) FROM Account
    	WHERE month(DateOpened)= #{month}
    	AND AccountTypeLK= #{type};
    </select>
    
    <select id="selectSubscriptionsTotal" resultType="Integer">
    	SELECT COUNT(*) FROM Account
    	WHERE AccountTypeLK= #{type};
    </select>
    
    <select id="selectOrdersByGenre" resultMap = "result">
    	SELECT Orders.DateTime, Orders.ReturnDate, Orders.Id, Movie.Name, Movie.Type, Movie.Id AS MovieId,
    	 Rental.MovieRating, Account.Customer AS CustomerId
    	 From Rental
    	 INNER JOIN Orders
    	 ON Rental.OrderId = Orders.Id
    	 Inner JOIN Movie
    	 ON Movie.Id = Rental.MovieId
    	 Inner JOIN Account
    	 ON Rental.AccountId = Account.Id
    	 WHERE Type = #{genre};
    	 
    	 
    </select>
    
    <select id="selectOrdersByMovie" resultMap = "result">
    	SELECT Orders.DateTime, Orders.ReturnDate, Orders.Id, Movie.Name, Movie.Type, Movie.Id AS MovieId,
    	 Rental.MovieRating, Account.Customer AS CustomerId
    	 From Rental
    	 INNER JOIN Orders
    	 ON Rental.OrderId = Orders.Id
    	 Inner JOIN Movie
    	 ON Movie.Id = Rental.MovieId
    	 Inner JOIN Account
    	 ON Rental.AccountId = Account.Id
    	 WHERE Movie.Id = #{movieId};
    </select>
        
    <select id="pastOrders" resultMap="result">
    
SELECT Orders.DateTime , Orders.Id, Movie.Name, Movie.Id AS MovieId, Rental.MovieRating
    FROM Account
    INNER JOIN Rental
    ON Account.Id = Rental.AccountId
    INNER JOIN Movie
    ON Rental.MovieId = Movie.Id
    INNER JOIN Orders
    ON Rental.OrderId= Orders.Id
    WHERE Account.Id = #{id}
    
    
    
    </select>
    
    <select id="account_subscriptions" resultMap = "subscription_type">
    SELECT * FROM Account_Type_LK;
    </select>
    
    <update id="addRating">
    UPDATE Rental
     <set>
    <if test= "order.movieRating !=null"> MovieRating = #{order.movieRating},</if>
    
    </set>
    	WHERE OrderId = #{order.id}
 		AND MovieId= #{order.movieId}
    
      </update>
      
      
      
      
      <update id="addAvgRating">
    UPDATE Movie
    SET Rating = (
    SELECT AVG(MovieRating) FROM Rental 
    WHERE Rental.MovieId= #{id}
    AND Rental.MovieRating IS NOT NULL )
    WHERE Movie.Id= #{id}
    </update>
    
    <delete id="clearShoppingCart">
    	DELETE FROM ShoppingCart
    	WHERE AccountId=#{accountId};
    </delete>
    
    
    
    </mapper>